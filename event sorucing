

"CQS" states that every method should either be a command that performs an action or a query that retrieves a result. The concerns shouldn’t be mixed.
Additionally, any ‘microservices’ should be split in write and read components too.

We never have to delete or update events (and no longer require the ‘UD’ in ‘CRUD’). We don’t need to synchronise resources as our event store is immutable. 

Event Sourcing system: 1. Events, 2. Calculators, 3. Aggregates and 4. Reactors.

1. Events 
2. Aggregates represent the current state of the application.
3. Calculators read events and update aggregates accordingly.
4. Reactors “react” to events as they are created. 

In other words,

1. Events to provide a history
2. Aggregates to represent the current state of the application
3. Calculator to update the state of the application
4. Reactors to trigger side effects as events happen


https://kickstarter.engineering/event-sourcing-made-simple-4a2625113224

All changes to an application state are stored as a sequence of events.
