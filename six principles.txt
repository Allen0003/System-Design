

https://ithelp.ithome.com.tw/articles/10095511

1. 單一職責原則（Single Responsibility Principle，SRP）:

將用戶資訊抽取成一個業務物件（Business Object，BO），把行為抽取成業務邏輯（Business Logic，Biz）


2. 里氏替換原則 Liskov’s Substitution Principle (LSP) :

在物件導向語言中，繼承是不可或缺的。繼承的優點如下：

通俗解釋，只要父類別能出現的地方，子類別就可以出現，並且替換子類別不會產生任何錯誤或異常。但是反過來就不行，子類別能出現的地方，父類別未必能適應。

3. 依賴倒置原則（Dependence Inversion Principle，DIP) : 

 高層模組不應依賴低層模組，兩者都應依賴其抽象。
 抽象不應依賴細節。
 細節應依賴抽象。

每個類別都盡量有介面或是抽象類別。

4. 介面隔離原則 (interface-segregation principles, ISP)

介面隔離原則是針對介面進行規範約束，包含以下四層含義：
 介面要盡量小：介面隔離原則的核心定義，不出現臃腫的介面，但也不能過度拆分而違反單一職責原則。
 介面要高內聚：提升介面、類別與模組的處理能力，減少對外的交互作用。
 訂製服務：系統不同模組間必然有耦合，有耦合就要有互相存取的介面，訂製服務就是指提供存取需要的方法，避免臃腫的介面。
 介面設計是有限度的：介面設計越細系統越靈活，但是同時也會造成架構的複雜化，因此介面設計須適度。

5. 迪米特法則（Law of Demeter，LoD）

也稱為最少知識原則（Least Knowledge Principle，LKP）。含義為一個物件應對其他物件有最少的了解。通俗來說就是我只要知道你提供這麼多public方法，其他我都一概不關心。


6. 開閉原則 (Open/closed principle)

一個軟體實體如類別、模組及函式應該對擴展開放，對修改關閉

開閉原則是其中最基礎的原則，也是其他五大原則的精神領袖。使用開閉原則時，專案章程非常重要，並且要預知可能的變化。開閉原則是一個終極目標，朝此方向努力可以非常顯著的改善一個系統的架構，真正做到擁抱變化的境界。

ps: 關注點分離（Separation of concerns，SOC）

由於關注點混雜在一起會導致複雜性大大增加，所以能夠把不同的關注點分離開來，分別處理就是處理複雜性的一個原則，一種方法。

